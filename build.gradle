plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.demo'
version = '0.0.1-SNAPSHOT'
description = 'Simple CRUD application'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}
configurations {
    proguard
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'


    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'


    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")

    testCompileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    proguard 'com.guardsquare:proguard-base:7.6.0'

}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('proguardTask', JavaExec) {
    dependsOn plainJar            // make sure plain jar exists
    group = 'build'
    description = 'Run ProGuard to obfuscate the plain jar'

    mainClass.set('proguard.ProGuard')
    classpath = configurations.proguard

    doFirst {
        def injarFile = file("${buildDir}/libs/${project.name}-${project.version}-plain.jar")
        if (!injarFile.exists()) {
            throw new GradleException("Input jar not found: ${injarFile}")
        }

        def runtimeJars = configurations.runtimeClasspath.files.findAll { f ->
            !f.absolutePath.equalsIgnoreCase(injarFile.absolutePath)
        }

        def argsList = []
        argsList += ['-injars', injarFile.absolutePath]

        runtimeJars.each { f ->
            argsList += ['-libraryjars', f.absolutePath]
        }

        argsList += ['-libraryjars', "${System.getProperty('java.home')}/jmods/java.base.jmod(!**.jar;!module-info.class)"]

        def outJar = file("${buildDir}/libs/${project.name}-${project.version}-obfuscated.jar")
        argsList += ['-outjars', outJar.absolutePath]

        argsList += ['@' + project.rootDir.toPath().resolve('proguard.pro').toString()]

        args = argsList
    }
}


tasks.register('buildObfuscated') {
    dependsOn 'bootJar', 'proguardTask'
    doLast {
        println('Repackage step: replace BOOT-INF/classes with ProGuard output (implement).')
    }
}

tasks.register('plainJar', Jar) {
    archiveClassifier.set('plain')
    from sourceSets.main.output
    dependsOn classes
}

